<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git主要命令</title>
    <link href="/2023/12/27/git%E4%B8%BB%E8%A6%81%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/12/27/git%E4%B8%BB%E8%A6%81%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a><strong>初始化仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a><strong>克隆仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;repository_url&gt;<br></code></pre></td></tr></table></figure><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a><strong>添加文件到暂存区</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;file_name&gt;<br></code></pre></td></tr></table></figure><h3 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a><strong>提交更改</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Commit message&quot;</span><br></code></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a><strong>查看状态</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a><strong>查看提交历史</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h3 id="推送更改到远程仓库"><a href="#推送更改到远程仓库" class="headerlink" title="推送更改到远程仓库"></a><strong>推送更改到远程仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push &lt;remote_name&gt; &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h3 id="添加远程仓库地址："><a href="#添加远程仓库地址：" class="headerlink" title="添加远程仓库地址："></a><strong>添加远程仓库地址：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;repository_url&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;repository_url&gt;</code> 是别人的仓库地址。可以使用 <code>git remote -v</code> 来确认远程仓库是否添加成功。</p><h3 id="拉取最新代码："><a href="#拉取最新代码：" class="headerlink" title="拉取最新代码："></a><strong>拉取最新代码：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;branch_name&gt;</code> 是你想要拉取代码的分支名。这个命令会从远程仓库（<code>origin</code>）拉取指定分支的最新代码到你的本地仓库。</p><p>这样就能够将别人仓库中的最新代码更新到你的本地工作环境中。</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入学习git</title>
    <link href="/2023/12/23/git%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/23/git%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关于版本控制"><a href="#1-关于版本控制" class="headerlink" title="1.关于版本控制"></a>1.关于版本控制</h2><p> 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h3 id="1-1本地版本控制系统"><a href="#1-1本地版本控制系统" class="headerlink" title="1.1本地版本控制系统"></a>1.1本地版本控制系统</h3><p>人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p><p><img src="G:\refuelling\image\local.png" alt="本地版本控制图解"></p><h3 id="1-2集中化的版本控制系统"><a href="#1-2集中化的版本控制系统" class="headerlink" title="1.2集中化的版本控制系统"></a>1.2集中化的版本控制系统</h3><p>集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生。 这类系统，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 多年以来，这已成为版本控制系统的标准做法。</p><p><img src="G:\refuelling\image\centralized.png" alt="集中化的版本控制图解"></p><p>这种做法带来了许多好处，特别是相较于老式的本地 VCS 来说。 现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。 而管理员也可以轻松掌控每个开发者的权限，并且管理一个 CVCS 要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。 这么做最显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险</p><h3 id="1-3分布式版本控制系统"><a href="#1-3分布式版本控制系统" class="headerlink" title="1.3分布式版本控制系统"></a>1.3分布式版本控制系统</h3><p>于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 在这类系统中，像 Git、Mercurial 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><p><img src="G:\refuelling\image\distributed.png" alt="分布式版本控制图解"></p><p>更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</p><h2 id="2-Git-基础"><a href="#2-Git-基础" class="headerlink" title="2.Git 基础"></a>2.Git 基础</h2><h3 id="2-1取得项目的-Git-仓库"><a href="#2-1取得项目的-Git-仓库" class="headerlink" title="2.1取得项目的 Git 仓库"></a>2.1取得项目的 Git 仓库</h3><p>有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。</p><h4 id="2-1-1在工作目录中初始化新仓库"><a href="#2-1-1在工作目录中初始化新仓库" class="headerlink" title="2.1.1在工作目录中初始化新仓库"></a>2.1.1在工作目录中初始化新仓库</h4><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>git init<br></code></pre></td></tr></table></figure><p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-built_in">add</span> *.c<br>$ git <span class="hljs-built_in">add</span> README<br>$ git commit -m <span class="hljs-string">&#x27;initial project version&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-1-2从现有仓库克隆"><a href="#2-1-2从现有仓库克隆" class="headerlink" title="2.1.2从现有仓库克隆"></a>2.1.2从现有仓库克隆</h4><p>克隆仓库的命令格式为 <em>git clone [url]</em> 。比如，要克隆 <em>Ruby</em> 语言的 <em>Git</em> 代码仓库 <em>Grit</em>，可以用下面的命令:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>://github.com/schacon/grit.git<br></code></pre></td></tr></table></figure><p>这会在当前目录下创建一个名为 <em>“grit”</em> 的目录，其中包含一个 <em>.git</em> 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 <em>grit</em> 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>://github.com/schacon/grit.git mygrit<br></code></pre></td></tr></table></figure><p>唯一的差别就是，现在新建的目录成了 <em>mygrit</em>，其他的都和上边的一样。</p><p>Git 支持许多数据传输协议。之前的例子使用的是 <strong>git:&#x2F;&#x2F;</strong> 协议，不过你也可以用 <strong>http(s):&#x2F;&#x2F;</strong> 或者 <strong>user@server:&#x2F;path.git</strong> 表示的 <strong>SSH</strong> 传输协议。</p><h3 id="2-2-记录每次更新到仓库"><a href="#2-2-记录每次更新到仓库" class="headerlink" title="2.2.记录每次更新到仓库"></a>2.2.记录每次更新到仓库</h3><p>现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</p><p>请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p><p>在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用 Git 时的文件状态变化周期如图所示。</p><p><img src="G:\refuelling\image\18333fig0201-tn.png" alt="../_images/18333fig0201-tn.png"></p><h4 id="2-2-1检查当前文件状态"><a href="#2-2-1检查当前文件状态" class="headerlink" title="2.2.1检查当前文件状态"></a>2.2.1检查当前文件状态</h4><p>要确定哪些文件当前处于什么状态，可以用 <strong>git status</strong> 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git status<br># <span class="hljs-keyword">On</span> branch master<br><span class="hljs-keyword">nothing</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span> (working directory clean)<br></code></pre></td></tr></table></figure><p>这说明你现在的工作目录相当干净。换句话说，当前没有任何跟踪着的文件，也没有任何文件在上次提交后更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 <em>master</em>，这是默认的分支名称，实际是可以修改的</p><p>现在让我们用 <em>vim</em> 编辑一个新文件 README，保存退出后运行 <strong>git status</strong> 会看到该文件出现在未跟踪文件列表中:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ vim README<br>$ git status<br><span class="hljs-comment"># On branch master</span><br><span class="hljs-comment"># Untracked files:</span><br><span class="hljs-comment">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   README</span><br>nothing added <span class="hljs-keyword">to</span> commit <span class="hljs-keyword">but</span> untracked files present (use <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-keyword">to</span> track)<br></code></pre></td></tr></table></figure><p>就是在 <em>“Untracked files”</em> 这行下面。Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。</p><h4 id="2-2-2跟踪新文件"><a href="#2-2-2跟踪新文件" class="headerlink" title="2.2.2跟踪新文件"></a>2.2.2跟踪新文件</h4><p>使用命令 <strong>git add</strong> 开始跟踪一个新文件。所以，要跟踪 <em>README</em> 文件，运行:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-built_in">add</span> README<br></code></pre></td></tr></table></figure><p>此时再运行 <em>git status</em> 命令，会看到 README 文件已被跟踪，并处于暂存状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">On branch master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Changes to be committed:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#   new file:   README</span></span><br><span class="hljs-meta prompt_">#</span><br></code></pre></td></tr></table></figure><p>只要在 <em>“Changes to be committed”</em> 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 <em>git init</em> 后就运行了 <em>git add</em> 命令，开始跟踪当前目录下的文件。在 <em>git add</em> 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 <em>git add</em> 的潜台词就是把目标文件快照放入暂存区域，也就是 <em>add file into staged area</em> ，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 <em>add</em> 操作的实际意义了。）</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机</title>
    <link href="/2023/12/19/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    <url>/2023/12/19/%E5%8D%95%E7%89%87%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="一-定义"><a href="#一-定义" class="headerlink" title="一.定义"></a>一.定义</h3><p><strong>单片机</strong>（英语：<strong>single-chip microcomputer</strong>，台湾作<strong>单晶片</strong>，全称<strong>单片微型计算机</strong>，又称<strong>微控制器单元</strong>（<strong>microcontroller unit</strong>）），是把<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8">中央处理器</a>、<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E8%A8%98%E6%86%B6%E9%AB%94">存储器</a>、定时&#x2F;计数器（timer&#x2F;counter）、各种<a href="https://zh.wikipedia.org/wiki/I/O">输入输出接口</a>等都集成在一块<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E9%9B%BB%E8%B7%AF">集成电路</a><a href="https://zh.wikipedia.org/wiki/%E8%8A%AF%E7%89%87">芯片</a>上的<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA">微型计算机</a>。与应用在个人电脑中的通用型<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%99%95%E7%90%86%E5%99%A8">微处理器</a>相比，它更强调自供应（不用外接硬件）和节约成本，集成程度更高，但因为规格已经包含，所能实现的功能也较专一。它的最大优点是体积小，可放在仪表内部，但存储量小，输入输出接口简单。由于其发展非常迅速，旧的定义已不能满足，所以在很多应用场合被称为范围更广的微控制器；由于单片机微电脑常用于当控制器，故又名single chip microcontroller。</p><h3 id="二-概述"><a href="#二-概述" class="headerlink" title="二.概述"></a>二.概述</h3><p>绝大多数现在的单片机都是基于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">冯·诺伊曼结构</a>的，这种结构清楚地定义了<a href="https://zh.wikipedia.org/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F">嵌入式系统</a>所必需的四个基本部分：一个中央处理器核心，程序存储器（只读存储器或者<a href="https://zh.wikipedia.org/wiki/%E9%97%AA%E5%AD%98">闪存</a>）、数据存储器（随机存储器）、一个或者更多的定时&#x2F;计数器，还有用来与外围设备以及扩展资源进行通信的输入&#x2F;输出端口——所有这些都被集成在单个集成电路芯片上。</p><p>单片机与通用型中央处理单元芯片不同在于前者一般很容易配合最小型的外部支持芯片制成工作计算机，这样就可以很容易的把单片机系统植入设备内部来控制设备了。近年来为了在指令和数据上使用不同的字宽，并提高处理器线速度，<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84">哈佛结构</a>在<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8">微控制器</a>（Microcontrollers）和<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%99%A8">数字信号处理器</a>也逐渐得到了广泛的应用。</p><p>传统的微处理器是不允许这么做的。它要完成单片机的工作，就必须连接一些其他芯片。比如说，因为芯片上没有数据存储器，就必须要添加一些RAM的存储芯片，虽然所添加存储器的容量很灵活，但是至少还是要添加。另外还需要添加很多连线来传递芯片之间的数据。与以上的情况相比，单片机的工作则相对独立，一个典型的微控制器只需要一个<a href="https://zh.wikipedia.org/w/index.php?title=%E6%97%B6%E9%92%9F%E5%8F%91%E7%94%9F%E5%99%A8&action=edit&redlink=1">时钟发生器</a>和很少的RAM和ROM（或者EPROM, E2PROM）就可以在软件和晶振下工作了。同时，微控制器具有丰富的输入输出设备，例如<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%8B%9F%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E5%99%A8">模拟数字转换器</a>、<a href="https://zh.wikipedia.org/wiki/%E5%AE%9A%E6%99%82%E5%99%A8">定时器</a>、<a href="https://zh.wikipedia.org/wiki/%E4%B8%B2%E5%8F%A3">串口</a>，以及其他串行通讯接口，比如<a href="https://zh.wikipedia.org/wiki/I%C2%B2C">I2C</a>，<a href="https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%91%A8%E9%82%8A%E4%BB%8B%E9%9D%A2">串行周边接口</a>，<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8D%80%E5%9F%9F%E7%B6%B2%E8%B7%AF">控制器局域网</a>等。通常，这些集成在内部的设备可以通过特殊的指令来操作。</p><p>单片机时钟频率通常较同时代的计算机芯片低，但它价格低廉，能够提供充足的程序存储器、丰富的片上接口。某些架构的单片机生产厂商众多，例如<a href="https://zh.wikipedia.org/wiki/8051">8051</a>系列、<a href="https://zh.wikipedia.org/wiki/Z80">Z80</a>系列。一些现代的微控制器支持一些内置的高级编程语言，比如<a href="https://zh.wikipedia.org/wiki/BASIC">BASIC(培基)</a>语言、<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>等。</p><h3 id="三-单片机的比特数"><a href="#三-单片机的比特数" class="headerlink" title="三.单片机的比特数"></a>三.单片机的比特数</h3><p>根据<a href="https://zh.wikipedia.org/wiki/%E5%8C%AF%E6%B5%81%E6%8E%92">总线</a>或资料<a href="https://zh.wikipedia.org/wiki/%E6%9A%AB%E5%AD%98%E5%99%A8">寄存器</a>的宽度，单片机又分为4位、8位、16位和32位单片机。4位单片机多用于冰箱、洗衣机、微波炉、灯具等简单的家电控制中；8位、16位单片机主要用于一般的控制领域，例如遥控器手把、空调、发动机等，一般不使用<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>；32位用于<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%AF%E7%B6%B2">网络</a>操作、<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%AA%92%E4%BD%93">多媒体</a>处理等复杂处理的场合，一般要使用<a href="https://zh.wikipedia.org/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">嵌入式操作系统</a>，例如电视、车机、监控器等产品。</p><h3 id="四-常见的单片机"><a href="#四-常见的单片机" class="headerlink" title="四.常见的单片机"></a>四.常见的单片机</h3><p>生产这种产品的供应商众多而且技术各有所长，<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%8A%AF">微芯</a>（Microchip）的<a href="https://zh.wikipedia.org/wiki/PIC">PIC</a>系列出货量居于业界领导者地位；<a href="https://zh.wikipedia.org/wiki/Atmel">Atmel</a>的51系列及<a href="https://zh.wikipedia.org/wiki/Atmel_AVR">AVR</a>系列种类众多，受支持面广，满足各种场景的市场需求；<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E5%B7%9E%E4%BB%AA%E5%99%A8">德州仪器</a>的<a href="https://zh.wikipedia.org/wiki/MSP430">MSP430</a>系列以低功耗闻名，常用于医疗电子产品及仪器仪表中；<a href="https://zh.wikipedia.org/wiki/%E7%91%9E%E8%90%A8">瑞萨</a>单片机在日本汽车业中使用广泛。</p><ul><li><p>英特尔</p><ul><li>8-bit 8051系列<ul><li>8XC42</li><li>MCS48</li><li><a href="https://zh.wikipedia.org/wiki/MCS-51">MCS51</a> : Intel 8051系列历史悠久，兼容产品众多，使用广泛</li><li>8xC251</li></ul></li><li>16-bit<ul><li>MCS96系列</li><li>MXS296</li></ul></li><li>32-bit<ul><li>i960</li></ul></li></ul></li><li><p><a href="https://zh.wikipedia.org/wiki/ARM_Holdings">ARM</a> （Acorn RISC Machine）系列单片机</p></li><li><p>AVR系列</p><p>（爱特梅尔公司）</p><ul><li>Atmel AT91 series (ARM 处理器等)</li><li>AT90 series – AVR (Atmel 的高性能RISC 8位单片机，老产品)</li><li>ATmega series – AVR (Atmel 的高性能RISC 8 位单片机，新产品)</li><li>ATXmega series – AVR (Atmel 的高性能RISC 32 位单片机，新产品)</li><li>Atmel AT89 series (Intel 8051&#x2F;MCS51 架构8位单片机)</li><li>MARC4</li></ul></li><li><p>Cypress MicroSystems（赛普拉斯微系统公司）</p><ul><li>CY8C2xxxx (<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%89%87%E4%B8%8A%E7%B3%BB%E7%BB%9F">PSoC</a>)</li></ul></li><li><p>飞思卡尔半导体</p><ul><li>8-bit<ul><li>68HC05 (CPU05)</li><li>68HC08 (CPU08)</li><li>68HC11 (CPU11)</li></ul></li><li>16-bit<ul><li>68HC12 (CPU12)</li><li>68HC16 (CPU16)</li><li>Freescale DSP56800 (DSPcontroller)</li></ul></li><li>32-bit<ul><li>Freescale 683XX (CPU32)</li><li>MPC500</li><li>MPC 860 (PowerQUICC)</li><li>MPC 8240&#x2F;8250 (PowerQUICC II)</li><li>MPC 8540&#x2F;8555&#x2F;8560 (PowerQUICC III)</li></ul></li></ul></li><li><p>Holtek（盛群半导体）</p><ul><li>HT48FXX Flash I&#x2F;O type</li><li>HT48RXX I&#x2F;O type</li><li>HT46RXX A&#x2F;D type</li><li>HT49RXX LCD type</li></ul></li><li><p>微芯片科技</p><p>（微芯公司）的</p><p>PIC微控制器</p><p>系列</p><ul><li>8-bit : PIC10 PIC12 PIC16 PIC18</li><li>16-bit : PIC24F PIC24H dsPIC30 dsPIC33</li><li>32bit : PIC32 （采用<a href="https://zh.wikipedia.org/wiki/MIPS%E7%A7%91%E6%8A%80%E5%85%AC%E5%8F%B8">MIPS</a> M4K 核心架构）</li></ul></li><li><p>美国国家半导体</p><ul><li><a href="https://zh.wikipedia.org/wiki/COP8">COP8</a></li><li><a href="https://zh.wikipedia.org/wiki/CR16">CR16</a></li></ul></li><li><p>NEC</p><ul><li>78K</li></ul></li><li><p>恩智浦半导体</p><ul><li>LPC2000</li><li>LPC900</li><li>LPC700</li></ul></li><li><p>Parallax, Inc.</p><ul><li><a href="https://zh.wikipedia.org/wiki/BASIC_Stamp">BASIC Stamp</a></li></ul></li><li><p>瑞萨科技</p><p>系列单片机</p><ul><li>Renesas 16-bits<ul><li>Renesas M16C Series</li><li>Renesas M32C Series</li><li>Renesas R8C Series</li><li>Renesas M16C&#x2F;Tiny Series</li><li>Renesas R8C&#x2F;Tiny Series</li><li>Renesas H8&#x2F;Tiny Series</li></ul></li></ul></li><li><p>意法半导体</p><ul><li>STM32 series (ARM Cortex-M3 系列，32位)</li><li>STM8 series (自主RISC指令集，8位)</li></ul></li><li><p>SyncMOS新茂国际科技全系列单片机</p><ul><li>SM59RXXA2 8-bits 1T(RISC)</li><li>SM59DXXG2 8-bits 6T(ISP)</li><li>SM59XX 8-bits 12T(ISP)</li><li>SM89XX 8-bits 12T(Traditional 8051)</li><li>SM79XX 8-bits 12T(Customization)</li></ul></li><li><p>PADAUK应广科技全系列单片机(多核心单片机)</p><ul><li>P201CS&#x2F;CD 8-bits</li><li>P211CS&#x2F;CD 8-bits</li><li>p232CS&#x2F;CD 8-bits</li><li>P234CS&#x2F;CD 8-bits</li></ul></li><li><p>ZiLOG</p><ul><li>Z8</li><li>Z86E02</li></ul></li><li><p>STC 宏晶系列单片机</p><ul><li>STC89C series 6T&#x2F;12T增强性单片机 (Intel 8051架构，有外部总线)</li><li>STC11F&#x2F;11L series 2T 增强性单片机 (Intel 8051增强架构，无外部总线程序支持)</li><li>STC12C&#x2F;12LE series 2T 增强性单片机 (Intel 8051增强架构，无外部总线程序支持)</li><li>STC15C&#x2F;15LE series 2T 增强性单片机 (Intel 8051增强架构，无外部总线程序支持，正在开发中)</li></ul></li><li><p>Kernel-IC 华芯单片机 LS系列</p><ul><li>LSx051 series 12T 双核单片机(Intel 8051架构，无外部总线)</li><li>LSx151 series 12T 三核单片机(Intel 8051架构，无外部总线)</li><li>LS052A series 6T 三核单片机(Intel 8051架构，无外部总线)</li></ul></li><li><p>新唐科技Nuvoton NuMicro Family</p><ul><li>8051 单片机 (8-bits)</li><li>ARM Cortex-M0 单片机 (32-bits)</li><li>ARM Cortex-M4 单片机 (32-bits)</li></ul></li></ul><h3 id="五-单片机的开发"><a href="#五-单片机的开发" class="headerlink" title="五.单片机的开发"></a>五.单片机的开发</h3><p>单片机的软件开发中，以往多使用<a href="https://zh.wikipedia.org/wiki/%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80">汇编语言</a>，如今越来越多的使用C语言，又或者使用<a href="https://zh.wikipedia.org/wiki/BASIC%E8%AF%AD%E8%A8%80">BASIC语言</a>等更适合初学者的语言，部分<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">集成开发环境</a>支持C++。单片机的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95">软件测试</a>需要使用<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91%E5%99%A8&action=edit&redlink=1">单片机开发器</a>或<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%8B%9F%E5%99%A8">模拟器</a>。</p><p>随着技术的发展，2000年后已经有很多单片机自带了ISP（在线编程设计）或支持IAP，彻底地改变了传统的开发模式，使得开发单片机系统时不会损坏芯片的引脚，加速了产品的上市并降低了研发成本，缩短了从设计、制造到现场调试的时间，简化了生产流程，大大提高了工作效率。这类单片机包括AT89S系列单片机、AVR系列单片机等。</p><h3 id="六-硬件"><a href="#六-硬件" class="headerlink" title="六.硬件"></a>六.硬件</h3><p>开发板可以进一步简化程序的开发和烧制过程。开发板可能包含实际芯片或是<a href="https://zh.wikipedia.org/wiki/%E4%BB%BF%E7%9C%9F%E5%99%A8">仿真器</a>。通过配套的下载线连接电脑与开发板，在电脑上编写程序下载到开发板。批量生产会用到编程器。</p><h3 id="七-软件开发环境"><a href="#七-软件开发环境" class="headerlink" title="七.软件开发环境"></a>七.软件开发环境</h3><p>一些知名的微控制器开发环境有：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%8A%AF">微芯</a>公司的 MPLAB <a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">IDE</a> 可用于该公司全系列微控制器的开发与调试，除支持该公司的 ASM<a href="https://zh.wikipedia.org/wiki/%E7%B5%84%E8%AD%AF%E5%99%A8">汇编器</a> <a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a><a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8">编译器</a>外，也支持许多第三方的编译器。</li><li><a href="https://zh.wikipedia.org/wiki/ARM">ARM</a>公司的 μVision <a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E5%90%88%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83">集成开发环境</a>（原为 Keil 公司产品，2005年该公司已由 ARM 购并），包含汇编器与 C编译器，可用于51单片机及ARM开发。</li><li>ARM公司的<a href="https://zh.wikipedia.org/wiki/Mbed">Mbed</a>，可以使用在线IDE来开发。</li></ul><h3 id="八-PROTEUS"><a href="#八-PROTEUS" class="headerlink" title="八.PROTEUS"></a>八.PROTEUS</h3><p><a href="https://zh.wikipedia.org/wiki/Proteus">Proteus</a>软件是初学者入门的首选软件，它是Labcenter Electronics公司的一款商业版电路设计与仿真软件。内包括ISIS、ARES等软件模块。ARES模块主要用来完成PCB的设计，ISIS模块用来完成电路原理图的布图与仿真。</p><p>Proteus的软件仿真基于VSM技术，它与其他软件最大的不同也是最大的优势就在于能仿真大量的单片机芯片，比如MCS-51系列、PIC系列等等，甚至ARM处理器，以及单片机外围电路，比如键盘、LED、LCD等等。该软件还附带了一些案例和丰富的帮助文件。</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何提高睡眠质量</title>
    <link href="/2023/11/23/%E6%8F%90%E9%AB%98%E7%9D%A1%E7%9C%A0%E8%B4%A8%E9%87%8F/"/>
    <url>/2023/11/23/%E6%8F%90%E9%AB%98%E7%9D%A1%E7%9C%A0%E8%B4%A8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="改善睡眠质量可以通过一些方法来实现："><a href="#改善睡眠质量可以通过一些方法来实现：" class="headerlink" title="改善睡眠质量可以通过一些方法来实现："></a>改善睡眠质量可以通过一些方法来实现：</h2><ol><li><p><strong>建立规律的睡眠时间表</strong>：每晚保持相似的睡眠时间，即使在周末也尽量保持一致。这有助于调整你的生物钟，让你更容易入睡和醒来。</p></li><li><p><strong>创造舒适的睡眠环境</strong>：确保卧室安静、黑暗、凉爽且舒适。优质的床垫和枕头也很重要。</p></li><li><p><strong>避免咖啡因和刺激性食物</strong>：尤其是在睡前几个小时，避免摄入咖啡因和含糖饮料。同样，减少饮食中的辛辣食物或过多液体摄入可以减少夜间醒来的次数。</p></li><li><p><strong>放松身心</strong>：在睡前进行放松活动，比如泡个热水澡、听轻柔的音乐、做些冥想或深呼吸练习，有助于缓解压力和焦虑。</p></li><li><p><strong>规律运动</strong>：适度的体育锻炼有助于改善睡眠质量，但最好不要在睡前进行剧烈的运动，因为这可能使你兴奋难以入眠。</p></li><li><p><strong>限制电子设备</strong>：避免在睡前使用手机、电脑或其他发出蓝光的设备。这些设备发出的光会干扰褪黑激素的分泌，影响睡眠质量。</p></li><li><p><strong>避免长时间午睡</strong>：过长或过晚的午睡可能影响夜间的睡眠质量。</p></li><li><p><strong>建立睡前习惯</strong>：比如喝杯温热牛奶、读书、做些简单的伸展运动等，让身体逐渐进入睡眠状态的信号。</p></li></ol><p>每个人对于改善睡眠的方法可能有所不同，因此可以尝试不同的方法，找到适合自己的方式。如果长期存在睡眠问题，最好向医生咨询，以获得更专业的建议和帮助。</p>]]></content>
    
    
    <categories>
      
      <category>生活技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>改善睡眠质量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的linux操作命令</title>
    <link href="/2023/11/22/linux/"/>
    <url>/2023/11/22/linux/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="常用的linux操作命令"><a href="#常用的linux操作命令" class="headerlink" title="常用的linux操作命令"></a>常用的linux操作命令</h2><p>一些常用的 Linux 命令包括：</p><ul><li><p><strong>ls</strong>: 查看目录内容</p></li><li><p><strong>cd</strong>: 更改目录</p></li><li><p><strong>mkdir</strong>: 创建新目录</p></li><li><p><strong>rm</strong>: 删除文件或目录</p></li><li><p><strong>cp</strong>: 复制文件或目录</p></li><li><p><strong>mv</strong>: 移动文件或目录</p></li><li><p><strong>cat</strong>: 查看文件内容</p></li><li><p><strong>grep</strong>: 在文件中搜索特定模式</p></li><li><p><strong>chmod</strong>: 更改文件权限</p></li><li><p><strong>sudo</strong>: 以超级用户权限运行命令</p></li><li><p><strong>apt&#x2F;yum</strong>: 包管理器，用于安装、更新和删除软件包</p></li><li><p><strong>pwd</strong>: 显示当前工作目录的路径</p></li><li><p><strong>tar</strong>: 创建或解压归档文件</p></li><li><p><strong>wget&#x2F;curl</strong>: 下载文件或内容</p></li><li><p><strong>top&#x2F;htop</strong>: 查看系统资源使用情况</p></li><li><p><strong>df</strong>: 显示磁盘空间使用情况</p></li><li><p><strong>du</strong>: 显示文件或目录的磁盘使用情况</p></li><li><p><strong>ssh</strong>: 远程登录到另一台计算机</p></li><li><p><strong>scp</strong>: 在本地系统和远程系统之间安全地传输文件</p></li><li><p><strong>find</strong>: 查找文件</p></li><li><p><strong>man</strong>: 查看命令的手册页</p></li><li><p><strong>ifconfig&#x2F;ip</strong>: 显示网络接口信息和配置</p></li><li><p><strong>ping</strong>: 测试与另一个主机的连接</p></li><li><p><strong>traceroute&#x2F;tracert</strong>: 显示到目标主机的路径</p></li><li><p><strong>netstat</strong>: 显示网络状态和连接信息</p></li><li><p><strong>systemctl&#x2F;service</strong>: 管理系统服务</p></li><li><p><strong>journalctl</strong>: 查看系统日志</p></li><li><p><strong>ssh-keygen</strong>: 生成 SSH 密钥对</p></li><li><p><strong>chmod&#x2F;chown</strong>: 更改文件或目录的权限和所有者</p></li><li><p><strong>awk&#x2F;sed</strong>: 文本处理工具，用于处理和转换文本数据</p></li></ul><p>这些命令可以帮助你进行系统配置、网络调试以及文件处理等各种任务。掌握这些命令可以让你更有效地管理和操作 Linux 系统。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
